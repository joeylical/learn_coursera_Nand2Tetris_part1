// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    Not(in=instruction[15], out=notA);
    And(a=instruction[15], b=instruction[5], out=ld1);
    And(a=notA, b=ld1, out=ApreMux);
    And(a=instruction[15], b=instruction[4], out=d2);
    And(a=instruction[15], b=instruction[3], out=d3);
    Mux16(a[0..14]=instruction[0..14], b=aluOut, sel=instruction[15], out=preA);

    Or(a=notA, b=instruction[5], out=loada);

    ARegister(in=preA, load=loada, out=AddressM);

    DRegister(in=aluOut, load=d2, out=aluX);

    Mux16(a=AddressM, b=inM, sel=instruction[12], out=aluY);

    ALU(x=aluX, y=aluY, 
        zx=instruction[11],
        nx=instruction[10],
        zy=instruction[9],
        ny=instruction[8],
        f=instruction[7],
        no=instruction[6],
        out=aluOut,
        zr=Zero,
        ng=Neg);
    
    And(a=instruction[3], b=instruction[4], out=d12);
    And(a=d12, b=instruction[5], out=d123);
    Not(in=d123, out=nd123);

    And(a=d3, b=true, out=writeM);

    Mux16(a=aluOut, b=false, sel=false, out=outM);
    Mux16(a=AddressM, b=false, sel=false, out[0..14]=addressM);

    Or(a=Zero, b=Neg, out=pPos);
    Not(in=pPos, out=Pos);
    

    And(a=instruction[0], b=Pos, out=j1);
    And(a=instruction[1], b=Zero, out=j2);
    And(a=instruction[2], b=Neg, out=j3);

    Or(a=j1, b=j2, out=j12);
    Or(a=j12, b=j3, out=j123);
    And(a=instruction[15], b=j123, out=pcload);
    // And(a=instruction[15], b=j123, out=);
    Not(in=pcload, out=inc);
    

    PC(in=AddressM, load=pcload, inc=inc, reset=reset, out[0..14]=pc);
}